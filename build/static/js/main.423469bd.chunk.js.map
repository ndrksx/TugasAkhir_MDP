{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","ListLegends.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ListItem","props","handleModal1","results","setState","modal1visible","name","title","desc","description","image","handleModal2","modal2visible","className","onClick","centered","visible","this","onOk","onCancel","width","src","alt","Legend","map","id","Component","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.423469bd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {Component} from \"react\";\n//framework buat make komponen button sama modal\nimport { Button, Modal } from \"antd\";\n//styiling dari framework antd\nimport \"antd/dist/antd.css\";\n//data local pengganti API buat nyimpen data\nimport Legend from \"./legend.json\";\n//styling custom\nimport './ListLegend.css';\n\nexport default class ListItem extends Component {\n  //nilai awal\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal1visible: false,\n      modal2visible: false,\n    };\n  }\n\n  //modal tampilan legend\n  handleModal1 = (results) => {\n    this.setState({\n      modal1visible: true,\n      name: results.name,\n      title: results.title,\n      desc: results.description,\n      image: results.image,\n    })\n  }\n  //modal tampilan about\n  handleModal2 = () => {\n    this.setState({\n      modal2visible: true,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"boxWhite\">\n          <center>\n            <h1 className=\"m-0\">LIST MATCH</h1>\n            <Button\n            className=\"button ml-5 mr-5 rounded mb-2\"\n            //misal di klik doi manggil modal 2 ( fungsi ) agar nilai modal visible true\n            onClick={() => {this.handleModal2()}}\n            >\n            About Me\n            </Button>\n          </center>\n          {/* Modal 1 yang nampilin list data */}\n          <Modal\n            title=\"Status\"\n            centered\n            visible={this.state.modal1visible}\n            onOk={() => this.setState({ modal1visible: false })}\n            onCancel={() => this.setState({ modal1visible: false })}\n            width={500}\n          >\n            <div className=\"text-center\">\n              <img src={this.state.image} alt=\"cover comic\"></img>\n              <h3>{this.state.name}</h3>\n              <p>Author: {this.state.title}</p>\n            </div>\n            <p>{this.state.desc}</p>\n          </Modal>\n          {/* Modal 2 yang nampilin about */}\n          <Modal\n            title=\"ABOUT ME\"\n            centered\n            visible={this.state.modal2visible}\n            onOk={() => this.setState({ modal2visible: false })}\n            onCancel={() => this.setState({ modal2visible: false })}\n            width={500}\n          >\n            <div className=\"text-center\">\n              <h3>Indra Kurniawan Santoso</h3>\n            </div>\n            <p>Umur&nbsp;: 21 Tahun</p>\n            <p>TTL&nbsp;: Semarang, 20 April 1999</p>\n            <p>Hobby&nbsp;: Renang</p>\n            <p>Tujuan hidup&nbsp;: bahagiain ortu, iso golek duet dewe.</p>\n            <p>instagram&nbsp;: @indrakurniawans</p>\n            <p>twitter&nbsp;: @pappppoyy</p>\n            <p>Store&nbsp;: @ndrksXstore</p>\n          </Modal>\n          <div className=\"container\">\n            <center>\n              {/* Map perulangan buat nampilin data dari legend .json */}\n            {Legend.map((results) => {\n              return(\n                <div className=\"card mb-3 text-center d-flex shadow\" key={results.id}>\n                  <div className=\"card-body text-center\">\n                    <img src={results.image} alt=\"Legend\"></img>\n                    <h3 className=\"card-title\">{results.name}</h3> \n                  </div>\n                  <button\n                    className=\"button ml-5 mr-5 rounded mb-2\"\n                    //manggil handle modal 1 yowww biar nilai nya true\n                    onClick={() => this.handleModal1(results)}\n                    //result, dikirim buat di tampilin di modal\n                  >                  \n                  show more detail\n                  </button>\n                </div>\n              );\n            })}\n            </center>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport ListLegend from './ListLegends';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ListLegend />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}